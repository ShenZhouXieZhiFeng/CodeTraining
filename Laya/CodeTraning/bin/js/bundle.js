var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var GameUI_1 = require("./script/GameUI");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        new GameUI_1.default();
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./script/GameUI":4}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CubeController = /** @class */ (function (_super) {
    __extends(CubeController, _super);
    function CubeController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rotateV3 = new Laya.Vector3(0, -0.01, 0);
        return _this;
    }
    CubeController.prototype.onAwake = function () {
        this._owner = this.owner;
    };
    CubeController.prototype.onUpdate = function () {
        this._owner.transform.rotate(this._rotateV3, true);
    };
    return CubeController;
}(Laya.Script));
exports.CubeController = CubeController;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CubeController_1 = require("./CubeController");
var UnlitMaterial_1 = require("./MaterialAndShader/UnlitMaterial");
var GameUI = /** @class */ (function () {
    function GameUI() {
        window['gu'] = this;
        Laya.Shader3D.debugMode = true;
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 3, 3));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //添加自定义模型
        var box = scene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)));
        box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        box.addComponent(CubeController_1.CubeController);
        // var customMaterial: CustomMaterial = new CustomMaterial();
        // box.meshRenderer.sharedMaterial = customMaterial;
        // let spMat: Laya.UnlitMaterial = new Laya.UnlitMaterial();
        // Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, (tex) =>
        // {
        //     spMat.albedoTexture = tex;
        // }));
        // box.meshRenderer.material = spMat;
        var spMat = new UnlitMaterial_1.UnlitMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            spMat.albedoTexture = tex;
        }));
        box.meshRenderer.material = spMat;
        // let material: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();
        // Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex: Laya.Texture2D)
        // {
        //     material.albedoTexture = tex;
        // }));
        // box.meshRenderer.material = material;
    }
    return GameUI;
}());
exports.default = GameUI;
},{"./CubeController":3,"./MaterialAndShader/UnlitMaterial":5}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UnlitMaterial = /** @class */ (function (_super) {
    __extends(UnlitMaterial, _super);
    function UnlitMaterial() {
        var _this = _super.call(this) || this;
        _this._albedoIntensity = 1.0;
        _this._enableVertexColor = false;
        _this._albedoColor = new Laya.Vector4(1, 1, 1, 1);
        _this._alphaTest = true;
        UnlitMaterial.initShader();
        _this.setShaderName(UnlitMaterial.shaderName);
        _this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, new Laya.Vector4(1, 1, 1, 1));
        return _this;
    }
    Object.defineProperty(UnlitMaterial.prototype, "alphaTest", {
        get: function () {
            return this._alphaTest;
        },
        set: function (value) {
            this._alphaTest = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnlitMaterial.prototype, "albedoColor", {
        get: function () {
            return this._albedoColor;
        },
        set: function (value) {
            this._albedoColor = value;
            this._shaderValues.setVector(UnlitMaterial.ALBEDOCOLOR, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnlitMaterial.prototype, "albedoTexture", {
        get: function () {
            return this._shaderValues.getTexture(UnlitMaterial.ALBEDOTEXTURE);
        },
        set: function (value) {
            if (value) {
                this._defineDatas.add(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);
            }
            else {
                this._defineDatas.remove(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE);
            }
            this._shaderValues.setTexture(UnlitMaterial.ALBEDOTEXTURE, value);
        },
        enumerable: true,
        configurable: true
    });
    UnlitMaterial.initShader = function () {
        if (UnlitMaterial.hasInit) {
            return;
        }
        UnlitMaterial.hasInit = true;
        UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = UnlitMaterial.shaderDefines.registerDefine("ALBEDOTEXTURE");
        UnlitMaterial.SHADERDEFINE_TILINGOFFSET = UnlitMaterial.shaderDefines.registerDefine("TILINGOFFSET");
        UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = UnlitMaterial.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
        var attributeMap = {
            'a_Position': /*laya.d3.graphics.Vertex.VertexMesh.MESH_POSITION0*/ 0,
            'a_Color': /*laya.d3.graphics.Vertex.VertexMesh.MESH_COLOR0*/ 1,
            'a_Texcoord0': /*laya.d3.graphics.Vertex.VertexMesh.MESH_TEXTURECOORDINATE0*/ 2,
            'a_BoneWeights': /*laya.d3.graphics.Vertex.VertexMesh.MESH_BLENDWEIGHT0*/ 7,
            'a_BoneIndices': /*laya.d3.graphics.Vertex.VertexMesh.MESH_BLENDINDICES0*/ 6
        };
        var uniformMap = {
            'u_Bones': /*laya.d3.shader.Shader3D.PERIOD_CUSTOM*/ 0,
            'u_AlbedoTexture': /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1,
            'u_AlbedoColor': /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1,
            'u_TilingOffset': /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1,
            'u_AlphaTestValue': /*laya.d3.shader.Shader3D.PERIOD_MATERIAL*/ 1,
            'u_MvpMatrix': /*laya.d3.shader.Shader3D.PERIOD_SPRITE*/ 2,
            'u_FogStart': /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4,
            'u_FogRange': /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4,
            'u_FogColor': /*laya.d3.shader.Shader3D.PERIOD_SCENE*/ 4
        };
        var vs = "#include \"Lighting.glsl\";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n	uniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n	const int c_MaxBoneCount = 24;\n	attribute vec4 a_BoneIndices;\n	attribute vec4 a_BoneWeights;\n	uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main() {\n	#ifdef BONE\n		mat4 skinTransform = mat4(0.0);\n		skinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n		skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n		skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n		skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n		vec4 position = skinTransform * a_Position;\n		gl_Position = u_MvpMatrix * position;\n	#else\n		gl_Position = u_MvpMatrix * a_Position;\n	#endif\n\n	v_Texcoord0 = a_Texcoord0;\n	#ifdef TILINGOFFSET\n		v_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n	#endif\n\n	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n		v_Color = a_Color;\n	#endif\n	gl_Position=remapGLPositionZ(gl_Position);\n}";
        var ps = "#ifdef FSHIGHPRECISION\n	precision highp float;\n#else\n	precision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n	varying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n	uniform sampler2D u_AlbedoTexture;\n	varying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALPHATEST\n	uniform float u_AlphaTestValue;\n#endif\n\n#ifdef FOG\n	uniform float u_FogStart;\n	uniform float u_FogRange;\n	#ifdef ADDTIVEFOG\n	#else\n		uniform vec3 u_FogColor;\n	#endif\n#endif\n\nvoid main()\n{\n	vec4 color =  u_AlbedoColor;\n	#ifdef ALBEDOTEXTURE\n		color *= texture2D(u_AlbedoTexture, v_Texcoord0);\n	#endif\n	#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n		color *= v_Color;\n	#endif\n	\n	#ifdef ALPHATEST\n		if(color.a < u_AlphaTestValue)\n			discard;\n	#endif\n	\n	gl_FragColor = color;\n	\n	#ifdef FOG\n		float lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n		#ifdef ADDTIVEFOG\n			gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n		#else\n			gl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n		#endif\n	#endif\n	\n}\n\n";
        var shader = Laya.Shader3D.add(UnlitMaterial.shaderName);
        var subShader = new Laya.SubShader(attributeMap, uniformMap, Laya.SkinnedMeshSprite3D.shaderDefines, UnlitMaterial.shaderDefines);
        shader.addSubShader(subShader);
        subShader.addShaderPass(vs, ps);
    };
    UnlitMaterial.hasInit = false;
    UnlitMaterial.shaderName = "UnlitShader";
    UnlitMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID('u_AlbedoTexture');
    UnlitMaterial.ALBEDOCOLOR = Laya.Shader3D.propertyNameToID('u_AlbedoColor');
    UnlitMaterial.RENDERMODE_OPAQUE = 0;
    UnlitMaterial.RENDERMODE_CUTOUT = 1;
    UnlitMaterial.RENDERMODE_TRANSPARENT = 2;
    UnlitMaterial.RENDERMODE_ADDTIVE = 3;
    UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE = 0;
    UnlitMaterial.SHADERDEFINE_TILINGOFFSET = 0;
    UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR = 0;
    return UnlitMaterial;
}(Laya.BaseMaterial));
exports.UnlitMaterial = UnlitMaterial;
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
